package ru.introguzzle.parsers.common.io.watch;

import lombok.Getter;

import java.nio.file.Path;
import java.nio.file.WatchEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;
import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;

/**
 * The {@code Report} interface represents a file system event report generated by the {@link FileWatcher}.
 * It provides information about the type of event, the file path, timestamp, and a reference to the previous report.
 */
public interface Report extends Iterable<Report> {

    /**
     * The {@code Type} enum represents the different kinds of file system events that can be reported.
     */
    @Getter
    enum Type {
        /** Indicates that a file or directory was created. */
        CREATE(ENTRY_CREATE),
        /** Indicates that a file or directory was modified. */
        MODIFY(ENTRY_MODIFY),
        /** Indicates that a file or directory was deleted. */
        DELETE(ENTRY_DELETE);

        private final WatchEvent.Kind<Path> kind;

        /**
         * Constructs a {@code Type} with the corresponding {@link WatchEvent.Kind}.
         *
         * @param kind the {@link WatchEvent.Kind} associated with the type
         */
        Type(WatchEvent.Kind<Path> kind) {
            this.kind = kind;
        }

        /**
         * Converts a {@link WatchEvent.Kind} to the corresponding {@code Type}.
         *
         * @param kind the {@link WatchEvent.Kind} to convert
         * @return the corresponding {@code Type}, or {@code null} if no match is found
         */
        public static Type of(WatchEvent.Kind<?> kind) {
            for (Type type : Type.values()) {
                if (type.kind == kind) {
                    return type;
                }
            }
            return null;
        }
    }

    /**
     * Converts this report and its previous reports into a list.
     * The list will contain this report followed by its predecessors.
     *
     * @return a {@link List} of reports starting from this report
     */
    default List<Report> toList() {
        List<Report> list = new ArrayList<>();
        Report report = this;
        while (report != null) {
            list.add(report);
            report = report.getPrevious();
        }

        return list;
    }

    /**
     * Retrieves the type of the file system event.
     *
     * @return the {@link Type} of the event
     */
    Type getType();

    /**
     * Retrieves the path of the file or directory involved in the event.
     *
     * @return the {@link Path} of the file or directory
     */
    Path getPath();

    /**
     * Retrieves the previous report in the sequence of events.
     *
     * @return the previous {@code Report}, or {@code null} if none
     */
    Report getPrevious();

    /**
     * Retrieves the timestamp of when the event occurred.
     *
     * @return a {@link Date} representing the event timestamp
     */
    Date getTimestamp();
}
