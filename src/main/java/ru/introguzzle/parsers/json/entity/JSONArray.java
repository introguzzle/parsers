package ru.introguzzle.parsers.json.entity;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import ru.introguzzle.parsers.common.util.UntypedArray;
import ru.introguzzle.parsers.common.visit.Visitable;
import ru.introguzzle.parsers.common.visit.Visitor;

import java.io.Serial;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * Represents a JSON array as a list of objects.
 * <p>
 * This class extends {@link ArrayList} to provide a structure for JSON arrays,
 * enabling easy serialization to and from JSON strings. It implements
 * the {@link JSONStringConvertable} interface.
 * </p>
 */
@SuppressWarnings("unused")
public class JSONArray extends UntypedArray implements
        JSONStringConvertable, Visitable<JSONArray, Visitor<JSONArray>>, Serializable {

    @Serial
    private static final long serialVersionUID = -1731069894963023770L;

    public static JSONArray of(Object... items) {
        return new JSONArray(List.of(items));
    }

    public JSONArray() {
        super();
    }

    public JSONArray(@NotNull Collection<?> collection) {
        super(collection);
    }

    public JSONArray(@NotNull Object[] array) {
        super(array);
    }

    public JSONArray(@NotNull List<?> l) {
        super(l);
    }

    /**
     * Converts this JSONArray to a JSONObject using a specified key extractor function
     * and an optional remapping function for handling duplicate keys.
     *
     * @param keyExtractor a function that extracts a key from each element in the JSONArray.
     *                     This key will be used in the resulting JSONObject.
     * @param remappingFunction an optional function that allows for custom remapping of keys
     *                          when a duplicate key is detected in the JSONObject.
     *                          This function takes the current value and the existing key
     *                          as parameters, and should return the new key to be used
     *                          in the JSONObject. If no remapping function is provided or
     *                          if no duplicate key is found, the original key is used.
     * @return a JSONObject constructed from the elements of this JSONArray, with keys
     *         generated by the keyExtractor and remapped as necessary by the remappingFunction.
     */

    public
    JSONObject toJSONObject(@NotNull Function<Object, String> keyExtractor,
                            @Nullable BiFunction<Object, String, String> remappingFunction) {
        JSONObject object = new JSONObject();

        for (Object value : this) {
            String key = keyExtractor.apply(value);
            if (remappingFunction != null && object.containsKey(key)) {
                key = remappingFunction.apply(value, key);
            }

            object.put(key, value);
        }

        return object;
    }

    @Override
    public Iterator<?> getIterator() {
        return iterator();
    }

    @Override
    public String getOpeningSymbol() {
        return "[";
    }

    @Override
    public String getClosingSymbol() {
        return "]";
    }

    @Override
    public String toString() {
        return toJSONStringCompact();
    }
}
